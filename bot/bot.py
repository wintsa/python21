import asyncio
import json
import urllib.request

from aiogram import Bot, Dispatcher, types, filters
from config import BOT_TOKEN

async def start_handler(event: types.Message):
    """
    –í—ã–¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    """
    await event.answer(
        f"Hello, {event.from_user.get_mention(as_html=True)} üëã!",
    )

async def echo(message: types.Message):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª
    """
    await message.answer(message.text)

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º
    """
    bot = Bot(token=BOT_TOKEN,
              parse_mode=types.ParseMode.HTML,
              )
    try:
        disp = Dispatcher(bot=bot)
        @disp.message_handler(filters.RegexpCommandsFilter(regexp_commands=['show (\w{6})']))
        async def show_handler(message: types.Message, regexp_command):
            """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–∞–º–æ–ª–µ—Ç–∞ –ø–æ –∫–æ–¥—É ICAO
            """
            path = "https://opensky-network.org/api/states/all?icao24="+regexp_command.group(1)
            data = urllib.request.urlopen(path).read()
            output = json.loads(data)
            states = output["states"]
            state = states[0]
            x = state[5]
            y = state[6]
            z = state[7]
            await message.reply(f"–°–∞–º–æ–ª–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ—á–∫–µ —Å –∫–æ–æ—Ä–∏–¥–Ω–∞—Ç–∞–º–∏ {x}, {y} –Ω–∞ –≤—ã—Å–æ—Ç–µ {z} –º–µ—Ç—Ä–æ–≤")

        @disp.message_handler(filters.RegexpCommandsFilter(regexp_commands=['show.*']))
        async def show_handler(message: types.Message, regexp_command):
            """
            –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –µ—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –ò–ö–ê–û
            """
            await message.reply(f"–í–≤–µ–¥–∏—Ç–µ /show –∏ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ò–ö–ê–û")

        disp.register_message_handler(start_handler, commands={"start", "restart"})
        disp.register_message_handler(echo)
        await disp.start_polling()
    finally:
        await bot.close()


if __name__ == '__main__':
    asyncio.run(main())